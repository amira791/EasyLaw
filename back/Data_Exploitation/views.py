from django.db.models import Q
from django.shortcuts import render
from Data_Collection.models import JuridicalText,  Adjutstement
from rest_framework.views import APIView
from rest_framework.response import Response
from .serializers import JuridicalTextSerializer

class SearchUtilities:
    @staticmethod
    def search_by_filter(
        signitureDateStart=None,
        signitureDateEnd=None,
        publicationDateStart=None,
        publicationDateEnd=None,
        type = None,
        source=None,
        ojNumber=None,  # official journal number
        jtNumber=None,  # juridical text number year
        jt_source=None,
        domain=None
    ):
        # Start with base queryset
        queryset = JuridicalText.objects.all()

        # Apply filters based on provided parameters
        if signitureDateStart:
            queryset = queryset.filter(signature_date__gte=signitureDateStart)
        if signitureDateEnd:
            queryset = queryset.filter(signature_date__lte=signitureDateEnd)
        if publicationDateStart:
            queryset = queryset.filter(publication_date__gte=publicationDateStart)
        if publicationDateEnd:
            queryset = queryset.filter(publication_date__lte=publicationDateEnd)
        if type:
            queryset = queryset.filter(type_text=type)
        if source:
            queryset = queryset.filter(source=source)
        if ojNumber:
            queryset = queryset.filter(official_journal__number=ojNumber)
        if jtNumber:
            queryset = queryset.filter(jt_number=jtNumber)
        if jt_source:
            queryset = queryset.filter(source=jt_source)
        if domain:
            queryset = queryset.filter(description__icontains=domain)

        return queryset
    
class JuridicalTextSearchAPI(APIView):
    def get(self, request):
        # Perform filtering (example: using signature date)
        signitureDateStart = '1974-01-01'
        signitureDateEnd = '1975-12-31'
        type_text = 'أمر'

        filtered_texts = SearchUtilities.search_by_filter(
            signitureDateStart=signitureDateStart,
            signitureDateEnd=signitureDateEnd
        )

        # Serialize the filtered queryset
        serializer = JuridicalTextSerializer(filtered_texts, many=True)

        # Create custom dictionary structure for each item
        data = []
        for juridical_text in serializer.data:
            # Retrieve adjustments related to the juridical text
            adjustments = Adjutstement.objects.filter(adjusted_num=juridical_text['id_text']).values('adjusting_num', 'adjustment_type')

            # Gather adjusting JuridicalText objects with adjustment_type
            adjusting_texts = []
            for adjustment in adjustments:
                adjusting_num = adjustment['adjusting_num']
                adjustment_type = adjustment['adjustment_type']

                # Retrieve adjusting JuridicalText object
                adjusting_text = JuridicalText.objects.filter(id_text=adjusting_num).values().first()
                if adjusting_text:
                    adjusting_texts.append({
                        **adjusting_text,
                        'adjustment_type': adjustment_type
                    })

            # Append juridical_text and adjusting_texts to data
            data.append({
                'juridical_text': juridical_text,
                'adjustments': adjusting_texts
            })

        # Return the list of dictionaries
        return Response(data)

